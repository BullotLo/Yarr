#!/usr/bin/env python3
#################################
# Author: Arisa Kubota
# Email: arisa.kubota at cern.ch
# Date: July 2019
# Project: Local Database for YARR
#################################

# Common
import os
import sys
import shutil
import json
import signal

import argparse 
import yaml

from getpass    import getpass
from pymongo    import MongoClient, errors, DESCENDING
from datetime   import datetime

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),'../lib/localdb-tools/modules'))

import register

DB_DEBUG=False

def readConfig(conf_path):
    f = open(conf_path, 'r')
    conf = yaml.load(f)
    return conf

def getArgs():
    home = os.environ['HOME']

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--config', help='Set config file path.', type=str)
    parser.add_argument('--username', help='Set the User Name of Local DB Server.', type=str)
    parser.add_argument('--password', help='Set the Password of Local DB Server.', type=str)
    parser.add_argument('--scan', help='Upload Cache Data after scanConsole in YARR', action='store_true')
    parser.add_argument('--comp', help='Register Component Data', action='store_true') #TO BE DELETED
    parser.add_argument('--dcs', help='Upload DCS Data', action='store_true')
    args = parser.parse_args()

    if args.config is not None:
        conf = readConfig(args.config)    # Read from config file
        if 'username' in conf and not args.username: args.username = conf['username']
        if 'password' in conf and not args.password: args.password = conf['password']
    if os.path.isfile('{}/.yarr/.localdb-cache'.format(home)):
        conf = readConfig('{}/.yarr/.localdb-cache'.format(home))    # Read from config file
        if 'username' in conf and not args.username: args.username = conf['username']
        if 'password' in conf and not args.password: args.password = conf['password']
    return args

def getTestRunData(tr_oid, serial_number, timestamp):
    if DB_DEBUG: print('Local DB: Get TestRun Data')

    global localdb

    global m_tr_oid
    m_tr_oid = '';

    if tr_oid=='' and (serial_number=='' or timestamp==-1):
        #TODO alert
        return

    if tr_oid=='':
        start_time = datetime.utcfromtimestamp(timestamp)
        doc_value = {
            'startTime': start_time,
            'serialNumber': serial_number
        }
    else:
        doc_value = {
            '_id': ObjectId(tr_oid)
        }
    this_run = localdb.testRun.find_one(doc_value)
    if this_run: m_tr_oid = this_run['_id']

def __init(url, name):
    global db_cfg
    global args
    global localdb

    max_server_delay = 1
    client = MongoClient(url, serverSelectionTimeoutMS=max_server_delay)
    localdb = client[name]
    try:
        client.server_info()
    except errors.ServerSelectionTimeoutError as err:
        print('WARNING: The connection of Local DB {} is BAD.'.format(url))
        print('         {}\n'.format(err))
        return False
    except errors.OperationFailure as err:
        print('WARNING: Need users authenticated.')
        through = False
        username = None
        password = None
        if args.username:
            username = args.username
        if args.password:
            password = args.password
        while through==False:
            if not username:
                username = input('User name > ')
            if not password:
                password = getpass('Password > ')
            try:
                localdb.authenticate(username, password)
                through = True
            except errors.OperationFailure as err: 
                print('ERROR: Authentication failed.')
                answer = input('Do you want to enter username and password again? [y/n]\n')
                if answer.lower()=='y':
                    username = None
                    password = None
                else:
                    return False
        answer = input('Do you want to remember the username and the password on the machine? [y/n]\n')
        if answer.lower() == 'y':
            account_path = '{}/.yarr/.localdb-cache'.format(home)
            account_file = open(account_path, 'w')
            account_data = { 'username': username, 'password': password }
            account_file.write(yaml.dump(account_data, default_flow_style=False))
            account_file.close()
            os.chmod(account_path,0o600)

    register.__set_localdb(localdb)
    localdb['fs.files'].create_index([('hash', DESCENDING), ('_id', DESCENDING)])

    register.__set_stage_list(db_cfg['stage'])
    register.__set_env_list(db_cfg['environment'])
    register.__set_cmp_list(db_cfg['component'])

    return True

def __set_cache(cache_dir):
    if DB_DEBUG: print('Local DB: Write cache data: {}'.format(cache_dir))

    global scan_log_json
    global db_cfg
    global option

    scan_log = '{}scanLog.json'.format(cache_dir)
    scan_log_json = register.toJson(scan_log)
    db_cfg = scan_log_json['dbCfg']
    db_url = 'mongodb://{0}:{1}'.format(db_cfg['hostIp'], db_cfg['hostPort'])
    db_name = db_cfg['dbName']
    if not __init(db_url, db_name)==True:
        print('exit...')
        sys.exit()

    register.__global.m_db_version = ['version']

    if option=='scan': __write_scan(cache_dir)
    if option=='dcs': __write_dcs(cache_dir)

def __write_scan(cache_dir):
    if DB_DEBUG: print('Local DB: Write cache scan data: {}'.format(cache_dir))

    global m_cache_json
    global m_cache_dir
    global scan_log_json
    global db_cfg

    # user
    register.__set_user('{}/user.json'.format(cache_dir))
    # site
    register.__set_site('{}/address.json'.format(cache_dir))

#TODO
    timestamp = db_cfg['startTime']
    conn_paths = []
    for conn_json in db_cfg['connectivity']:
        register.__check_conn_cfg
    # connectivity
    timestamp = scan_log_json['startTime']
    conns = []
    conn_jsons = register.__set_conn_cfg(scan_log_json['connectivity'], cache_dir)
    for conn_json in conn_jsons:
        mo_serial_number = conn_json["module"]["serialNumber"]
        getTestRunData('', mo_serial_number, timestamp)
        global m_tr_oid
        if m_tr_oid!='':
            message = 'Already registered test run data in DB, then skip to save...'
            register.alert(message, 'warning')
            continue
        conns.append(conn_json)

    scan_type = scan_log_json['scanType']
    run_number = scan_log_json['runNumber']
    target_charge = scan_log_json['targetCharge']
    target_tot = scan_log_json['targetTot']
    start_timestamp = scan_log_json['startTime']
    command = scan_log_json['exec'] 
    register.__set_test_run_start(scan_type, conns, run_number, target_charge, target_tot, start_timestamp, command)

    # controller config
    cfg_json = scan_log_json['ctrlCfg']
    register.__set_config(-1, -1, cfg_json, 'controller', 'ctrlCfg', 'testRun', 'null')

    scan_cfg_path = '{0}{1}.json'.format(cache_dir, scan_type)
    cfg_json = register.toJson(scan_cfg_path)
    register.__set_config(-1, -1, cfg_json, scan_type, 'scanCfg', 'testRun', 'null')

    for conn_json in conns:
        for chip_json in conn_json['chips']:
            chip_serial_number = chip_json['serialNumber']
            chip_name = chip_json['name']
            title = 'chipCfg'
            # before
            chip_cfg_path = chip_json['config'].split('/')[len(chip_json['config'].split('/'))-1]
            cfg_json = register.toJson('{0}{1}.before'.format(cache_dir, chip_cfg_path))
            filename = 'beforeCfg'
            register.__set_config(-1, -1, cfg_json, filename, title, 'componentTestRun', chip_serial_number)

            # before
            chip_cfg_path = chip_json['config'].split('/')[len(chip_json['config'].split('/'))-1]
            cfg_json = register.toJson('{0}{1}.after'.format(cache_dir, chip_cfg_path))
            filename = 'afterCfg'
            register.__set_config(-1, -1, cfg_json, filename, title, 'componentTestRun', chip_serial_number)

            # attachment
            for file_name in os.listdir(cache_dir):
                if chip_name in file_name and 'dat' in file_name:
                    file_path = '{0}{1}'.format(cache_dir, file_name)
                    histoname = file_name.split('{}_'.format(chip_name))[1].split('.')[0]
                    register.__set_attachment(-1, -1, file_path, histoname, chip_serial_number)

    finish_timestamp = scan_log_json['finishTime']
    register.__set_test_run_finish(scan_type, conns, run_number, target_charge, target_tot, finish_timestamp, command)

def __write_dcs(cache_dir):
    if DB_DEBUG: print('Local DB: Write cache DCS data: {}'.format(cache_dir))

def cache():
    global args
    global db_cfg
    global option
    args = getArgs()

    option = 'scan'
    home = os.environ['HOME']
    with open('{}/.yarr/run.dat'.format(home),'r') as f:
        cache_list = f.readlines()
    for cache_dir in reversed(cache_list):
        cache_dir = cache_dir.split('\n')[0]
        __set_cache(cache_dir)
#        __clear()

if __name__ == '__main__': cache()
