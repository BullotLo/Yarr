image: gitlab-registry.cern.ch/yarr/yarr_container:yarr_build

job_build_and_test:
    stage: build
    script:
      - scl enable devtoolset-7 bash
      - source /opt/rh/devtoolset-7/enable
      - mkdir  build
      - cd build
      - cmake3 .. -DCMAKE_TOOLCHAIN_FILE=../cmake/linux-gcc
      - make install -j4
      - export USER=test
      - echo $USER
      - /bin/pwd
      - mkdir /tmp/test
      - ls /tmp/
      - cd ../
      - bin/scanConsole -r configs/controller/emuCfg.json -c configs/connectivity/example_fei4b_setup.json -s configs/scans/fei4/std_digitalscan.json -p
      - ls
      - ls ./data/
      - ls ./data/000001_std_digitalscan/
      - cat ./data/000001_std_digitalscan/*_OccupancyMap.dat
      - NUM100=`cat ./data/000001_std_digitalscan/*_OccupancyMap.dat | grep -o 100 | wc -l`
      - if [ "$NUM100" != "26880" ]; then exit 2; fi
      - bin/scanConsole -k
      - bin/test_main

job_build_all:
    stage: build
    artifacts:
        paths:
          - bin
    script:
      - scl enable devtoolset-7 bash
      - source /opt/rh/devtoolset-7/enable
      - mkdir  build
      - cd build
      - cmake3 .. -DCMAKE_TOOLCHAIN_FILE=../cmake/linux-gcc -DYARR_CONTROLLERS_TO_BUILD=all -DYARR_FRONT_ENDS_TO_BUILD=all
      - make install -j4
      - bin/scanConsole -k

job_build_clang:
    stage: build
    script:
      - scl enable devtoolset-7 bash
      - source /opt/rh/devtoolset-7/enable
      - scl enable   llvm-toolset-6.0  bash
      - source /opt/rh/llvm-toolset-6.0/enable
      - mkdir -p build
      - cd build 
      - cmake3 .. -DCMAKE_TOOLCHAIN_FILE=../cmake/linux-clang
      - make install -j4
      - cd ..
      - bin/scanConsole -k

job_test_json_parsing:
    stage: test
    dependencies: ["job_build_all"]
    script:
      # Check schema by loading configs in turn
      - for file in $(find configs/defaults -iname "*.json"); do echo ${file}; bin/testJson -f ${file} -t FRONT_END || break; done
      - for file in $(find configs/connectivity -iname "*.json"); do echo ${file}; bin/testJson -f ${file} -t CONNECTIVITY || break; done
      - for file in $(find configs/controller -iname "*.json"); do echo ${file}; bin/testJson -f ${file} -t CONTROLLER || break; done
      - for file in $(find configs/scans/* -iname "*.json"); do echo ${file}; bin/testJson -f ${file} -t SCAN_CONFIG || break; done

job_test_json:
    stage: build
    script:
      - npm install jsonlint -g
      - for file in $(find ../configs/ -iname "*.json"); do echo ${file}; jsonlint -q ${file} || break -1; done
